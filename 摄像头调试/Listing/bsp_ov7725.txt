; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\bsp_ov7725.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\bsp_ov7725.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\GeneralTim -IF:\单片机\智能农装\机械摄像头完全体\Project\RVMDK（uv5）\RTE -ID:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -ID:\Keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=515 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\bsp_ov7725.crf ..\..\User\ov7725\bsp_ov7725.c]
                          THUMB

                          AREA ||i.FIFO_GPIO_Config||, CODE, READONLY, ALIGN=2

                  FIFO_GPIO_Config PROC
;;;218     ************************************************/
;;;219    static void FIFO_GPIO_Config(void)
000000  b508              PUSH     {r3,lr}
;;;220    {
;;;221        GPIO_InitTypeDef GPIO_InitStructure;
;;;222    	
;;;223    		/*开启时钟*/
;;;224    	  RCC_APB2PeriphClockCmd (OV7725_OE_GPIO_CLK|OV7725_WRST_GPIO_CLK|
000002  2101              MOVS     r1,#1
000004  203c              MOVS     r0,#0x3c
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;225    															OV7725_RRST_GPIO_CLK|OV7725_RCLK_GPIO_CLK|
;;;226    															OV7725_WE_GPIO_CLK|OV7725_DATA_GPIO_CLK, ENABLE );
;;;227    	
;;;228    		/*(FIFO_OE--FIFO输出使能)*/
;;;229    		GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
00000a  2010              MOVS     r0,#0x10
00000c  f88d0003          STRB     r0,[sp,#3]
;;;230        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	
000010  2003              MOVS     r0,#3
000012  f88d0002          STRB     r0,[sp,#2]
;;;231    		GPIO_InitStructure.GPIO_Pin = OV7725_OE_GPIO_PIN;
000016  2008              MOVS     r0,#8
000018  f8ad0000          STRH     r0,[sp,#0]
;;;232    		GPIO_Init(OV7725_OE_GPIO_PORT, &GPIO_InitStructure);
00001c  4669              MOV      r1,sp
00001e  481a              LDR      r0,|L1.136|
000020  f7fffffe          BL       GPIO_Init
;;;233    	
;;;234    			/*(FIFO_WRST--FIFO写复位)*/
;;;235    		GPIO_InitStructure.GPIO_Pin = OV7725_WRST_GPIO_PIN;
000024  2010              MOVS     r0,#0x10
000026  f8ad0000          STRH     r0,[sp,#0]
;;;236    		GPIO_Init(OV7725_WRST_GPIO_PORT, &GPIO_InitStructure);
00002a  4669              MOV      r1,sp
00002c  4817              LDR      r0,|L1.140|
00002e  f7fffffe          BL       GPIO_Init
;;;237    	
;;;238    			/*(FIFO_RRST--FIFO读复位) */
;;;239    		GPIO_InitStructure.GPIO_Pin = OV7725_RRST_GPIO_PIN;
000032  2004              MOVS     r0,#4
000034  f8ad0000          STRH     r0,[sp,#0]
;;;240    		GPIO_Init(OV7725_RRST_GPIO_PORT, &GPIO_InitStructure);
000038  4669              MOV      r1,sp
00003a  4813              LDR      r0,|L1.136|
00003c  f7fffffe          BL       GPIO_Init
;;;241    		
;;;242    		/*(FIFO_RCLK-FIFO读时钟)*/
;;;243    		GPIO_InitStructure.GPIO_Pin = OV7725_RCLK_GPIO_PIN;
000040  2020              MOVS     r0,#0x20
000042  f8ad0000          STRH     r0,[sp,#0]
;;;244    		GPIO_Init(OV7725_RCLK_GPIO_PORT, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4810              LDR      r0,|L1.140|
00004a  f7fffffe          BL       GPIO_Init
;;;245    
;;;246    		/*(FIFO_WE--FIFO写使能)*/
;;;247    		GPIO_InitStructure.GPIO_Pin = OV7725_WE_GPIO_PIN;	
00004e  2008              MOVS     r0,#8
000050  f8ad0000          STRH     r0,[sp,#0]
;;;248    		GPIO_Init(OV7725_WE_GPIO_PORT, &GPIO_InitStructure);
000054  4669              MOV      r1,sp
000056  480e              LDR      r0,|L1.144|
000058  f7fffffe          BL       GPIO_Init
;;;249    	
;;;250    
;;;251        /*(FIFO_DATA--FIFO输出数据)*/
;;;252    		GPIO_InitStructure.GPIO_Pin = 	OV7725_DATA_0_GPIO_PIN | OV7725_DATA_1_GPIO_PIN |
00005c  f44f407f          MOV      r0,#0xff00
000060  f8ad0000          STRH     r0,[sp,#0]
;;;253    																			OV7725_DATA_2_GPIO_PIN | OV7725_DATA_3_GPIO_PIN |
;;;254    																			OV7725_DATA_4_GPIO_PIN | 	OV7725_DATA_5_GPIO_PIN |
;;;255    																			OV7725_DATA_6_GPIO_PIN | 	OV7725_DATA_7_GPIO_PIN;
;;;256        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000064  2004              MOVS     r0,#4
000066  f88d0003          STRB     r0,[sp,#3]
;;;257        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00006a  2003              MOVS     r0,#3
00006c  f88d0002          STRB     r0,[sp,#2]
;;;258    		GPIO_Init(OV7725_DATA_GPIO_PORT, &GPIO_InitStructure);
000070  4669              MOV      r1,sp
000072  4808              LDR      r0,|L1.148|
000074  f7fffffe          BL       GPIO_Init
;;;259    		
;;;260    		
;;;261        FIFO_OE_L();	  					/*拉低使FIFO输出使能*/
000078  2008              MOVS     r0,#8
00007a  4903              LDR      r1,|L1.136|
00007c  3114              ADDS     r1,r1,#0x14
00007e  6008              STR      r0,[r1,#0]
;;;262        FIFO_WE_H();   						/*拉高使FIFO写允许*/
000080  4903              LDR      r1,|L1.144|
000082  3110              ADDS     r1,r1,#0x10
000084  6008              STR      r0,[r1,#0]
;;;263    		
;;;264    		
;;;265    }
000086  bd08              POP      {r3,pc}
;;;266    
                          ENDP

                  |L1.136|
                          DCD      0x40010800
                  |L1.140|
                          DCD      0x40011000
                  |L1.144|
                          DCD      0x40011400
                  |L1.148|
                          DCD      0x40010c00

                          AREA ||i.ImagDisp||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  ImagDisp PROC
;;;782      */
;;;783    uint8_t ImagDisp(uint16_t sx,uint16_t sy,uint16_t width,uint16_t height, uint16_t bf[], uint16_t es, uint16_t *cnt)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;784    {
000004  b0d3              SUB      sp,sp,#0x14c
000006  4683              MOV      r11,r0
000008  4615              MOV      r5,r2
00000a  469a              MOV      r10,r3
00000c  f8dd9188          LDR      r9,[sp,#0x188]
;;;785    	uint16_t i, j; 
;;;786    	uint16_t Camera_Data;
;;;787    	uint16_t tmp[3];
;;;788    	uint16_t tmpcnt = 0;
000010  2700              MOVS     r7,#0
;;;789    	uint8_t batch[320];	//桶排序数组
;;;790    	
;;;791    	ILI9341_OpenWindow(sx,sy,width,height);
000012  4653              MOV      r3,r10
000014  462a              MOV      r2,r5
000016  4658              MOV      r0,r11
000018  9954              LDR      r1,[sp,#0x150]
00001a  f7fffffe          BL       ILI9341_OpenWindow
;;;792    	ILI9341_Write_Cmd ( CMD_SetPixel );	
00001e  202c              MOVS     r0,#0x2c
000020  f7fffffe          BL       ILI9341_Write_Cmd
;;;793    	
;;;794    	for(i = 0; i < width; i++) {//桶清零
000024  2400              MOVS     r4,#0
000026  e004              B        |L2.50|
                  |L2.40|
;;;795    		batch[i] = 0;
000028  2000              MOVS     r0,#0
00002a  a901              ADD      r1,sp,#4
00002c  5508              STRB     r0,[r1,r4]
00002e  1c60              ADDS     r0,r4,#1              ;794
000030  b284              UXTH     r4,r0                 ;794
                  |L2.50|
000032  42ac              CMP      r4,r5                 ;794
000034  dbf8              BLT      |L2.40|
;;;796    	}
;;;797    	for(i = 0; i < height; i++)
000036  2400              MOVS     r4,#0
000038  e03e              B        |L2.184|
                  |L2.58|
;;;798    	{
;;;799    		for(j = 0; j < width; j++)
00003a  f04f0800          MOV      r8,#0
00003e  e037              B        |L2.176|
                  |L2.64|
;;;800    		{
;;;801    			READ_FIFO_PIXEL(Camera_Data);		/* 从FIFO读出一个rgb565像素到Camera_Data变量 */
000040  bf00              NOP      
000042  2600              MOVS     r6,#0
000044  2020              MOVS     r0,#0x20
000046  4949              LDR      r1,|L2.364|
000048  6148              STR      r0,[r1,#0x14]
00004a  4849              LDR      r0,|L2.368|
00004c  6800              LDR      r0,[r0,#0]
00004e  f400467f          AND      r6,r0,#0xff00
000052  2020              MOVS     r0,#0x20
000054  6108              STR      r0,[r1,#0x10]
000056  6148              STR      r0,[r1,#0x14]
000058  4845              LDR      r0,|L2.368|
00005a  6800              LDR      r0,[r0,#0]
00005c  f3c02007          UBFX     r0,r0,#8,#8
000060  4306              ORRS     r6,r6,r0
000062  2020              MOVS     r0,#0x20
000064  6108              STR      r0,[r1,#0x10]
000066  bf00              NOP      
;;;802    			tmp[0] = (Camera_Data & 0xf800) >> 10;
000068  f4064078          AND      r0,r6,#0xf800
00006c  1280              ASRS     r0,r0,#10
00006e  f8ad0144          STRH     r0,[sp,#0x144]
;;;803    			tmp[1] = (Camera_Data & 0x07e0) >> 5;
000072  f3c61045          UBFX     r0,r6,#5,#6
000076  f8ad0146          STRH     r0,[sp,#0x146]
;;;804    			tmp[2] = (Camera_Data & 0x001f) << 1;
00007a  06f0              LSLS     r0,r6,#27
00007c  0e80              LSRS     r0,r0,#26
00007e  f8ad0148          STRH     r0,[sp,#0x148]
;;;805    			//printf("%d %d %d\n", tmp[0], tmp[1], tmp[2] );
;;;806    			if(color_check(tmp, es)) {
000082  a851              ADD      r0,sp,#0x144
000084  9961              LDR      r1,[sp,#0x184]
000086  f7fffffe          BL       color_check
00008a  b150              CBZ      r0,|L2.162|
;;;807    				Camera_Data = 0xF800;
00008c  f44f4678          MOV      r6,#0xf800
;;;808    				tmpcnt++;
000090  1c78              ADDS     r0,r7,#1
000092  b287              UXTH     r7,r0
;;;809    				batch[j]++;	//结果入桶
000094  a801              ADD      r0,sp,#4
000096  f8100008          LDRB     r0,[r0,r8]
00009a  1c40              ADDS     r0,r0,#1
00009c  a901              ADD      r1,sp,#4
00009e  f8010008          STRB     r0,[r1,r8]
                  |L2.162|
;;;810    			}
;;;811    			ILI9341_Write_Data(Camera_Data);
0000a2  4630              MOV      r0,r6
0000a4  f7fffffe          BL       ILI9341_Write_Data
0000a8  f1080001          ADD      r0,r8,#1              ;799
0000ac  fa1ff880          UXTH     r8,r0                 ;799
                  |L2.176|
0000b0  45a8              CMP      r8,r5                 ;799
0000b2  dbc5              BLT      |L2.64|
0000b4  1c60              ADDS     r0,r4,#1              ;797
0000b6  b284              UXTH     r4,r0                 ;797
                  |L2.184|
0000b8  4554              CMP      r4,r10                ;797
0000ba  dbbe              BLT      |L2.58|
;;;812    		}
;;;813    	}
;;;814    	*cnt = tmpcnt;
0000bc  f8a97000          STRH     r7,[r9,#0]
;;;815    //	if(tmpcnt >= 2000){
;;;816    //		LED_RED;
;;;817    //	} else {
;;;818    //		LED_WHITE;
;;;819    //	}
;;;820    
;;;821    	for(i = 0; i < width; i++) {
0000c0  2400              MOVS     r4,#0
0000c2  e013              B        |L2.236|
                  |L2.196|
;;;822    		tmpcnt = tmpcnt - batch[i];
0000c4  a801              ADD      r0,sp,#4
0000c6  5d00              LDRB     r0,[r0,r4]
0000c8  1a38              SUBS     r0,r7,r0
0000ca  b287              UXTH     r7,r0
;;;823    		if(tmpcnt < (*cnt)/2 ) {
0000cc  f8b90000          LDRH     r0,[r9,#0]
0000d0  eb0071d0          ADD      r1,r0,r0,LSR #31
0000d4  ebb70f61          CMP      r7,r1,ASR #1
0000d8  da06              BGE      |L2.232|
;;;824    			printf("共有 %d 个点，中心在 %d 处\n", *cnt, i);
0000da  f8b91000          LDRH     r1,[r9,#0]
0000de  4622              MOV      r2,r4
0000e0  a024              ADR      r0,|L2.372|
0000e2  f7fffffe          BL       __2printf
;;;825    			break;
0000e6  e003              B        |L2.240|
                  |L2.232|
0000e8  1c60              ADDS     r0,r4,#1              ;821
0000ea  b284              UXTH     r4,r0                 ;821
                  |L2.236|
0000ec  42ac              CMP      r4,r5                 ;821
0000ee  dbe9              BLT      |L2.196|
                  |L2.240|
0000f0  bf00              NOP      
;;;826    		}
;;;827    	}
;;;828    	if(tmpcnt <= 1400) {
0000f2  f5b76faf          CMP      r7,#0x578
0000f6  dc0b              BGT      |L2.272|
;;;829    		LED_RGBOFF;
0000f8  2020              MOVS     r0,#0x20
0000fa  491d              LDR      r1,|L2.368|
0000fc  3108              ADDS     r1,r1,#8
0000fe  6008              STR      r0,[r1,#0]
000100  2001              MOVS     r0,#1
000102  6008              STR      r0,[r1,#0]
000104  2002              MOVS     r0,#2
000106  6008              STR      r0,[r1,#0]
;;;830    		return 0;
000108  2000              MOVS     r0,#0
                  |L2.266|
;;;831    	}
;;;832    	if(i < width/2 - 20) {
;;;833    		LED_BLUE;
;;;834    		return 2;
;;;835    	} else if(i > width/2 + 20) {
;;;836    		LED_GREEN;
;;;837    		return 3;
;;;838    	} else {
;;;839    		LED_RED;
;;;840    		return 1;
;;;841    	}
;;;842    	//printf("%d\n", tmpcnt);  调试距离
;;;843    	
;;;844    }
00010a  b057              ADD      sp,sp,#0x15c
00010c  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.272|
000110  eb0571d5          ADD      r1,r5,r5,LSR #31      ;832
000114  1049              ASRS     r1,r1,#1              ;832
000116  3914              SUBS     r1,r1,#0x14           ;832
000118  42a1              CMP      r1,r4                 ;832
00011a  dd09              BLE      |L2.304|
00011c  2020              MOVS     r0,#0x20              ;833
00011e  4914              LDR      r1,|L2.368|
000120  3108              ADDS     r1,r1,#8              ;833
000122  6008              STR      r0,[r1,#0]            ;833
000124  2001              MOVS     r0,#1                 ;833
000126  6008              STR      r0,[r1,#0]            ;833
000128  2002              MOVS     r0,#2                 ;833
00012a  1d09              ADDS     r1,r1,#4              ;833
00012c  6008              STR      r0,[r1,#0]            ;833
00012e  e7ec              B        |L2.266|
                  |L2.304|
000130  eb0571d5          ADD      r1,r5,r5,LSR #31      ;835
000134  2214              MOVS     r2,#0x14              ;835
000136  eb020161          ADD      r1,r2,r1,ASR #1       ;835
00013a  42a1              CMP      r1,r4                 ;835
00013c  da0b              BGE      |L2.342|
00013e  2020              MOVS     r0,#0x20              ;836
000140  490b              LDR      r1,|L2.368|
000142  3108              ADDS     r1,r1,#8              ;836
000144  6008              STR      r0,[r1,#0]            ;836
000146  2001              MOVS     r0,#1                 ;836
000148  1d09              ADDS     r1,r1,#4              ;836
00014a  6008              STR      r0,[r1,#0]            ;836
00014c  2002              MOVS     r0,#2                 ;836
00014e  1f09              SUBS     r1,r1,#4              ;836
000150  6008              STR      r0,[r1,#0]            ;836
000152  2003              MOVS     r0,#3                 ;837
000154  e7d9              B        |L2.266|
                  |L2.342|
000156  2020              MOVS     r0,#0x20              ;839
000158  4905              LDR      r1,|L2.368|
00015a  310c              ADDS     r1,r1,#0xc            ;839
00015c  6008              STR      r0,[r1,#0]            ;839
00015e  2001              MOVS     r0,#1                 ;839
000160  1f09              SUBS     r1,r1,#4              ;839
000162  6008              STR      r0,[r1,#0]            ;839
000164  2002              MOVS     r0,#2                 ;839
000166  6008              STR      r0,[r1,#0]            ;839
000168  2001              MOVS     r0,#1                 ;840
00016a  e7ce              B        |L2.266|
;;;845    /*
                          ENDP

                  |L2.364|
                          DCD      0x40011000
                  |L2.368|
                          DCD      0x40010c08
                  |L2.372|
000174  b9b2d3d0          DCB      185,178,211,208," %d ",184,246,181,227,163,172,214,208,208
000178  20256420
00017c  b8f6b5e3
000180  a3acd6d0
000184  d0      
000185  c4d4da20          DCB      196,212,218," %d ",180,166,"\n",0
000189  256420b4
00018d  a60a00  

                          AREA ||i.OV7725_Brightness||, CODE, READONLY, ALIGN=1

                  OV7725_Brightness PROC
;;;466      */
;;;467    void OV7725_Brightness(int8_t bri)
000000  b570              PUSH     {r4-r6,lr}
;;;468    {
000002  4606              MOV      r6,r0
;;;469    	uint8_t BRIGHT_Value,SIGN_Value;	
;;;470    	
;;;471    	switch(bri)
000004  1d30              ADDS     r0,r6,#4
000006  2809              CMP      r0,#9
000008  d221              BCS      |L3.78|
00000a  e8dff000          TBB      [pc,r0]
00000e  1d1a              DCB      0x1d,0x1a
000010  1714110e          DCB      0x17,0x14,0x11,0x0e
000014  0b080500          DCB      0x0b,0x08,0x05,0x00
;;;472    	{
;;;473    		case 4:
;;;474    				BRIGHT_Value = 0x48;
000018  2448              MOVS     r4,#0x48
;;;475    				SIGN_Value = 0x06;
00001a  2506              MOVS     r5,#6
;;;476    			break;
00001c  e01a              B        |L3.84|
;;;477    		
;;;478    		case 3:
;;;479    				BRIGHT_Value = 0x38;
00001e  2438              MOVS     r4,#0x38
;;;480    				SIGN_Value = 0x06;		
000020  2506              MOVS     r5,#6
;;;481    		break;	
000022  e017              B        |L3.84|
;;;482    		
;;;483    		case 2:
;;;484    				BRIGHT_Value = 0x28;
000024  2428              MOVS     r4,#0x28
;;;485    				SIGN_Value = 0x06;			
000026  2506              MOVS     r5,#6
;;;486    		break;	
000028  e014              B        |L3.84|
;;;487    		
;;;488    		case 1:
;;;489    				BRIGHT_Value = 0x18;
00002a  2418              MOVS     r4,#0x18
;;;490    				SIGN_Value = 0x06;			
00002c  2506              MOVS     r5,#6
;;;491    		break;	
00002e  e011              B        |L3.84|
;;;492    		
;;;493    		case 0:
;;;494    				BRIGHT_Value = 0x08;
000030  2408              MOVS     r4,#8
;;;495    				SIGN_Value = 0x06;			
000032  2506              MOVS     r5,#6
;;;496    		break;	
000034  e00e              B        |L3.84|
;;;497    		
;;;498    		case -1:
;;;499    				BRIGHT_Value = 0x08;
000036  2408              MOVS     r4,#8
;;;500    				SIGN_Value = 0x0e;		
000038  250e              MOVS     r5,#0xe
;;;501    		break;	
00003a  e00b              B        |L3.84|
;;;502    		
;;;503    		case -2:
;;;504    				BRIGHT_Value = 0x18;
00003c  2418              MOVS     r4,#0x18
;;;505    				SIGN_Value = 0x0e;		
00003e  250e              MOVS     r5,#0xe
;;;506    		break;	
000040  e008              B        |L3.84|
;;;507    		
;;;508    		case -3:
;;;509    				BRIGHT_Value = 0x28;
000042  2428              MOVS     r4,#0x28
;;;510    				SIGN_Value = 0x0e;		
000044  250e              MOVS     r5,#0xe
;;;511    		break;	
000046  e005              B        |L3.84|
;;;512    		
;;;513    		case -4:
;;;514    				BRIGHT_Value = 0x38;
000048  2438              MOVS     r4,#0x38
;;;515    				SIGN_Value = 0x0e;		
00004a  250e              MOVS     r5,#0xe
;;;516    		break;	
00004c  e002              B        |L3.84|
                  |L3.78|
;;;517    		
;;;518    		default:
;;;519    			OV7725_DEBUG("Brightness parameter error!");
00004e  bf00              NOP      
000050  bf00              NOP      
;;;520    			break;
000052  bf00              NOP      
                  |L3.84|
000054  bf00              NOP                            ;476
;;;521    	}
;;;522    
;;;523    		SCCB_WriteByte(REG_BRIGHT, BRIGHT_Value); //AWB on
000056  4621              MOV      r1,r4
000058  209b              MOVS     r0,#0x9b
00005a  f7fffffe          BL       SCCB_WriteByte
;;;524    		SCCB_WriteByte(REG_SIGN, SIGN_Value);
00005e  4629              MOV      r1,r5
000060  20ab              MOVS     r0,#0xab
000062  f7fffffe          BL       SCCB_WriteByte
;;;525    }		
000066  bd70              POP      {r4-r6,pc}
;;;526    
                          ENDP


                          AREA ||i.OV7725_Color_Saturation||, CODE, READONLY, ALIGN=1

                  OV7725_Color_Saturation PROC
;;;445      */
;;;446    void OV7725_Color_Saturation(int8_t sat)
000000  b510              PUSH     {r4,lr}
;;;447    {
000002  4604              MOV      r4,r0
;;;448    
;;;449     	if(sat >=-4 && sat<=4)
000004  f1140f04          CMN      r4,#4
000008  db0e              BLT      |L4.40|
00000a  2c04              CMP      r4,#4
00000c  dc0c              BGT      |L4.40|
;;;450    	{	
;;;451    		SCCB_WriteByte(REG_USAT, (sat+4)<<4); 
00000e  1d20              ADDS     r0,r4,#4
000010  0700              LSLS     r0,r0,#28
000012  0e01              LSRS     r1,r0,#24
000014  20a7              MOVS     r0,#0xa7
000016  f7fffffe          BL       SCCB_WriteByte
;;;452    		SCCB_WriteByte(REG_VSAT, (sat+4)<<4);
00001a  1d20              ADDS     r0,r4,#4
00001c  0700              LSLS     r0,r0,#28
00001e  0e01              LSRS     r1,r0,#24
000020  20a8              MOVS     r0,#0xa8
000022  f7fffffe          BL       SCCB_WriteByte
000026  e001              B        |L4.44|
                  |L4.40|
;;;453    	}
;;;454    	else
;;;455    	{
;;;456    		OV7725_DEBUG("Color Saturation parameter error!");
000028  bf00              NOP      
00002a  bf00              NOP      
                  |L4.44|
;;;457    	}
;;;458    	
;;;459    }			
00002c  bd10              POP      {r4,pc}
;;;460    
                          ENDP


                          AREA ||i.OV7725_Contrast||, CODE, READONLY, ALIGN=1

                  OV7725_Contrast PROC
;;;531      */
;;;532    void OV7725_Contrast(int8_t cnst)
000000  b510              PUSH     {r4,lr}
;;;533    {
000002  4604              MOV      r4,r0
;;;534    	if(cnst >= -4 && cnst <=4)
000004  f1140f04          CMN      r4,#4
000008  db0b              BLT      |L5.34|
00000a  2c04              CMP      r4,#4
00000c  dc09              BGT      |L5.34|
;;;535    	{
;;;536    		SCCB_WriteByte(REG_CNST, (0x30-(4-cnst)*4));
00000e  f1c40004          RSB      r0,r4,#4
000012  2230              MOVS     r2,#0x30
000014  eba20080          SUB      r0,r2,r0,LSL #2
000018  b2c1              UXTB     r1,r0
00001a  209c              MOVS     r0,#0x9c
00001c  f7fffffe          BL       SCCB_WriteByte
000020  e001              B        |L5.38|
                  |L5.34|
;;;537    	}
;;;538    	else
;;;539    	{
;;;540    		OV7725_DEBUG("Contrast parameter error!");
000022  bf00              NOP      
000024  bf00              NOP      
                  |L5.38|
;;;541    	}
;;;542    }		
000026  bd10              POP      {r4,pc}
;;;543    
                          ENDP


                          AREA ||i.OV7725_GPIO_Config||, CODE, READONLY, ALIGN=1

                  OV7725_GPIO_Config PROC
;;;315     ************************************************/
;;;316    void OV7725_GPIO_Config(void)
000000  b510              PUSH     {r4,lr}
;;;317    {
;;;318    	SCCB_GPIO_Config();
000002  f7fffffe          BL       SCCB_GPIO_Config
;;;319    	FIFO_GPIO_Config();
000006  f7fffffe          BL       FIFO_GPIO_Config
;;;320    	VSYNC_GPIO_Config();
00000a  f7fffffe          BL       VSYNC_GPIO_Config
;;;321    	
;;;322    }
00000e  bd10              POP      {r4,pc}
;;;323    
                          ENDP


                          AREA ||i.OV7725_Init||, CODE, READONLY, ALIGN=2

                  OV7725_Init PROC
;;;330     ************************************************/
;;;331    ErrorStatus OV7725_Init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;332    {
;;;333    	uint16_t i = 0;
000002  2400              MOVS     r4,#0
;;;334    	uint8_t Sensor_IDCode = 0;	
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;335    	
;;;336    	//DEBUG("ov7725 Register Config Start......");
;;;337    	
;;;338    	if( 0 == SCCB_WriteByte ( 0x12, 0x80 ) ) /*复位sensor */
000008  2180              MOVS     r1,#0x80
00000a  2012              MOVS     r0,#0x12
00000c  f7fffffe          BL       SCCB_WriteByte
000010  b908              CBNZ     r0,|L7.22|
;;;339    	{
;;;340    		//DEBUG("sccb write data error");		
;;;341    		return ERROR ;
000012  2000              MOVS     r0,#0
                  |L7.20|
;;;342    	}	
;;;343    
;;;344    	if( 0 == SCCB_ReadByte( &Sensor_IDCode, 1, 0x0b ) )	 /* 读取sensor ID号*/
;;;345    	{
;;;346    		//DEBUG("read id faild");		
;;;347    		return ERROR;
;;;348    	}
;;;349    	//DEBUG("Sensor ID is 0x%x", Sensor_IDCode);	
;;;350    	
;;;351    	if(Sensor_IDCode == OV7725_ID)
;;;352    	{
;;;353    		for( i = 0 ; i < OV7725_REG_NUM ; i++ )
;;;354    		{
;;;355    			if( 0 == SCCB_WriteByte(Sensor_Config[i].Address, Sensor_Config[i].Value) )
;;;356    			{                
;;;357    				//DEBUG("write reg faild", Sensor_Config[i].Address);
;;;358    				return ERROR;
;;;359    			}
;;;360    		}
;;;361    	}
;;;362    	else
;;;363    	{
;;;364    		return ERROR;
;;;365    	}
;;;366    	//DEBUG("ov7725 Register Config Success");
;;;367    	
;;;368    	return SUCCESS;
;;;369    }
000014  bd38              POP      {r3-r5,pc}
                  |L7.22|
000016  220b              MOVS     r2,#0xb               ;344
000018  2101              MOVS     r1,#1                 ;344
00001a  4668              MOV      r0,sp                 ;344
00001c  f7fffffe          BL       SCCB_ReadByte
000020  b908              CBNZ     r0,|L7.38|
000022  2000              MOVS     r0,#0                 ;347
000024  e7f6              B        |L7.20|
                  |L7.38|
000026  f89d0000          LDRB     r0,[sp,#0]            ;351
00002a  2821              CMP      r0,#0x21              ;351
00002c  d114              BNE      |L7.88|
00002e  2400              MOVS     r4,#0                 ;353
000030  e00d              B        |L7.78|
                  |L7.50|
000032  4a0b              LDR      r2,|L7.96|
000034  eb020244          ADD      r2,r2,r4,LSL #1       ;355
000038  7851              LDRB     r1,[r2,#1]            ;355
00003a  4a09              LDR      r2,|L7.96|
00003c  f8120014          LDRB     r0,[r2,r4,LSL #1]     ;355
000040  f7fffffe          BL       SCCB_WriteByte
000044  b908              CBNZ     r0,|L7.74|
000046  2000              MOVS     r0,#0                 ;358
000048  e7e4              B        |L7.20|
                  |L7.74|
00004a  1c60              ADDS     r0,r4,#1              ;353
00004c  b284              UXTH     r4,r0                 ;353
                  |L7.78|
00004e  4805              LDR      r0,|L7.100|
000050  7800              LDRB     r0,[r0,#0]            ;353  ; OV7725_REG_NUM
000052  4284              CMP      r4,r0                 ;353
000054  dbed              BLT      |L7.50|
000056  e001              B        |L7.92|
                  |L7.88|
000058  2000              MOVS     r0,#0                 ;364
00005a  e7db              B        |L7.20|
                  |L7.92|
00005c  2001              MOVS     r0,#1                 ;368
00005e  e7d9              B        |L7.20|
;;;370    
                          ENDP

                  |L7.96|
                          DCD      Sensor_Config
                  |L7.100|
                          DCD      OV7725_REG_NUM

                          AREA ||i.OV7725_Light_Mode||, CODE, READONLY, ALIGN=1

                  OV7725_Light_Mode PROC
;;;383      */
;;;384    void OV7725_Light_Mode(uint8_t mode)
000000  b510              PUSH     {r4,lr}
;;;385    {
000002  4604              MOV      r4,r0
;;;386    	switch(mode)
000004  2c06              CMP      r4,#6
000006  d279              BCS      |L8.252|
000008  e8dff004          TBB      [pc,r4]
00000c  03142d46          DCB      0x03,0x14,0x2d,0x46
000010  5f79              DCB      0x5f,0x79
;;;387    	{
;;;388    		case 0:	//Auto，自动模式
;;;389    			SCCB_WriteByte(0x13, 0xff); //AWB on 
000012  21ff              MOVS     r1,#0xff
000014  2013              MOVS     r0,#0x13
000016  f7fffffe          BL       SCCB_WriteByte
;;;390    			SCCB_WriteByte(0x0e, 0x65);
00001a  2165              MOVS     r1,#0x65
00001c  200e              MOVS     r0,#0xe
00001e  f7fffffe          BL       SCCB_WriteByte
;;;391    			SCCB_WriteByte(0x2d, 0x00);
000022  2100              MOVS     r1,#0
000024  202d              MOVS     r0,#0x2d
000026  f7fffffe          BL       SCCB_WriteByte
;;;392    			SCCB_WriteByte(0x2e, 0x00);
00002a  2100              MOVS     r1,#0
00002c  202e              MOVS     r0,#0x2e
00002e  f7fffffe          BL       SCCB_WriteByte
;;;393    			break;
000032  e070              B        |L8.278|
;;;394    		case 1://sunny，晴天
;;;395    			SCCB_WriteByte(0x13, 0xfd); //AWB off
000034  21fd              MOVS     r1,#0xfd
000036  2013              MOVS     r0,#0x13
000038  f7fffffe          BL       SCCB_WriteByte
;;;396    			SCCB_WriteByte(0x01, 0x5a);
00003c  215a              MOVS     r1,#0x5a
00003e  2001              MOVS     r0,#1
000040  f7fffffe          BL       SCCB_WriteByte
;;;397    			SCCB_WriteByte(0x02, 0x5c);
000044  215c              MOVS     r1,#0x5c
000046  2002              MOVS     r0,#2
000048  f7fffffe          BL       SCCB_WriteByte
;;;398    			SCCB_WriteByte(0x0e, 0x65);
00004c  2165              MOVS     r1,#0x65
00004e  200e              MOVS     r0,#0xe
000050  f7fffffe          BL       SCCB_WriteByte
;;;399    			SCCB_WriteByte(0x2d, 0x00);
000054  2100              MOVS     r1,#0
000056  202d              MOVS     r0,#0x2d
000058  f7fffffe          BL       SCCB_WriteByte
;;;400    			SCCB_WriteByte(0x2e, 0x00);
00005c  2100              MOVS     r1,#0
00005e  202e              MOVS     r0,#0x2e
000060  f7fffffe          BL       SCCB_WriteByte
;;;401    			break;	
000064  e057              B        |L8.278|
;;;402    		case 2://cloudy，多云
;;;403    			SCCB_WriteByte(0x13, 0xfd); //AWB off
000066  21fd              MOVS     r1,#0xfd
000068  2013              MOVS     r0,#0x13
00006a  f7fffffe          BL       SCCB_WriteByte
;;;404    			SCCB_WriteByte(0x01, 0x58);
00006e  2158              MOVS     r1,#0x58
000070  2001              MOVS     r0,#1
000072  f7fffffe          BL       SCCB_WriteByte
;;;405    			SCCB_WriteByte(0x02, 0x60);
000076  2160              MOVS     r1,#0x60
000078  2002              MOVS     r0,#2
00007a  f7fffffe          BL       SCCB_WriteByte
;;;406    			SCCB_WriteByte(0x0e, 0x65);
00007e  2165              MOVS     r1,#0x65
000080  200e              MOVS     r0,#0xe
000082  f7fffffe          BL       SCCB_WriteByte
;;;407    			SCCB_WriteByte(0x2d, 0x00);
000086  2100              MOVS     r1,#0
000088  202d              MOVS     r0,#0x2d
00008a  f7fffffe          BL       SCCB_WriteByte
;;;408    			SCCB_WriteByte(0x2e, 0x00);
00008e  2100              MOVS     r1,#0
000090  202e              MOVS     r0,#0x2e
000092  f7fffffe          BL       SCCB_WriteByte
;;;409    			break;	
000096  e03e              B        |L8.278|
;;;410    		case 3://office，办公室
;;;411    			SCCB_WriteByte(0x13, 0xfd); //AWB off
000098  21fd              MOVS     r1,#0xfd
00009a  2013              MOVS     r0,#0x13
00009c  f7fffffe          BL       SCCB_WriteByte
;;;412    			SCCB_WriteByte(0x01, 0x84);
0000a0  2184              MOVS     r1,#0x84
0000a2  2001              MOVS     r0,#1
0000a4  f7fffffe          BL       SCCB_WriteByte
;;;413    			SCCB_WriteByte(0x02, 0x4c);
0000a8  214c              MOVS     r1,#0x4c
0000aa  2002              MOVS     r0,#2
0000ac  f7fffffe          BL       SCCB_WriteByte
;;;414    			SCCB_WriteByte(0x0e, 0x65);
0000b0  2165              MOVS     r1,#0x65
0000b2  200e              MOVS     r0,#0xe
0000b4  f7fffffe          BL       SCCB_WriteByte
;;;415    			SCCB_WriteByte(0x2d, 0x00);
0000b8  2100              MOVS     r1,#0
0000ba  202d              MOVS     r0,#0x2d
0000bc  f7fffffe          BL       SCCB_WriteByte
;;;416    			SCCB_WriteByte(0x2e, 0x00);
0000c0  2100              MOVS     r1,#0
0000c2  202e              MOVS     r0,#0x2e
0000c4  f7fffffe          BL       SCCB_WriteByte
;;;417    			break;	
0000c8  e025              B        |L8.278|
;;;418    		case 4://home，家里
;;;419    			SCCB_WriteByte(0x13, 0xfd); //AWB off
0000ca  21fd              MOVS     r1,#0xfd
0000cc  2013              MOVS     r0,#0x13
0000ce  f7fffffe          BL       SCCB_WriteByte
;;;420    			SCCB_WriteByte(0x01, 0x96);
0000d2  2196              MOVS     r1,#0x96
0000d4  2001              MOVS     r0,#1
0000d6  f7fffffe          BL       SCCB_WriteByte
;;;421    			SCCB_WriteByte(0x02, 0x40);
0000da  2140              MOVS     r1,#0x40
0000dc  2002              MOVS     r0,#2
0000de  f7fffffe          BL       SCCB_WriteByte
;;;422    			SCCB_WriteByte(0x0e, 0x65);
0000e2  2165              MOVS     r1,#0x65
0000e4  200e              MOVS     r0,#0xe
0000e6  f7fffffe          BL       SCCB_WriteByte
;;;423    			SCCB_WriteByte(0x2d, 0x00);
0000ea  2100              MOVS     r1,#0
0000ec  202d              MOVS     r0,#0x2d
0000ee  f7fffffe          BL       SCCB_WriteByte
;;;424    			SCCB_WriteByte(0x2e, 0x00);
0000f2  2100              MOVS     r1,#0
0000f4  202e              MOVS     r0,#0x2e
0000f6  f7fffffe          BL       SCCB_WriteByte
;;;425    			break;	
0000fa  e00c              B        |L8.278|
                  |L8.252|
0000fc  e008              B        |L8.272|
;;;426    		
;;;427    		case 5://night，夜晚
;;;428    			SCCB_WriteByte(0x13, 0xff); //AWB on
0000fe  21ff              MOVS     r1,#0xff
000100  2013              MOVS     r0,#0x13
000102  f7fffffe          BL       SCCB_WriteByte
;;;429    			SCCB_WriteByte(0x0e, 0xe5);
000106  21e5              MOVS     r1,#0xe5
000108  200e              MOVS     r0,#0xe
00010a  f7fffffe          BL       SCCB_WriteByte
;;;430    			break;	
00010e  e002              B        |L8.278|
                  |L8.272|
;;;431    		
;;;432    		default:
;;;433    			 OV7725_DEBUG("Light Mode parameter error!"); 
000110  bf00              NOP      
000112  bf00              NOP      
;;;434    
;;;435    			break;
000114  bf00              NOP      
                  |L8.278|
000116  bf00              NOP                            ;393
;;;436    	}
;;;437    
;;;438    }			
000118  bd10              POP      {r4,pc}
;;;439    
                          ENDP


                          AREA ||i.OV7725_Special_Effect||, CODE, READONLY, ALIGN=1

                  OV7725_Special_Effect PROC
;;;556      */
;;;557    void OV7725_Special_Effect(uint8_t eff)
000000  b510              PUSH     {r4,lr}
;;;558    {
000002  4604              MOV      r4,r0
;;;559    	switch(eff)
000004  2c07              CMP      r4,#7
000006  d258              BCS      |L9.186|
000008  e8dff004          TBB      [pc,r4]
00000c  04111e2b          DCB      0x04,0x11,0x1e,0x2b
000010  38455200          DCB      0x38,0x45,0x52,0x00
;;;560    	{
;;;561    		case 0://正常
;;;562    			SCCB_WriteByte(0xa6, 0x06);
000014  2106              MOVS     r1,#6
000016  20a6              MOVS     r0,#0xa6
000018  f7fffffe          BL       SCCB_WriteByte
;;;563    			SCCB_WriteByte(0x60, 0x80);
00001c  2180              MOVS     r1,#0x80
00001e  2060              MOVS     r0,#0x60
000020  f7fffffe          BL       SCCB_WriteByte
;;;564    			SCCB_WriteByte(0x61, 0x80);
000024  2180              MOVS     r1,#0x80
000026  2061              MOVS     r0,#0x61
000028  f7fffffe          BL       SCCB_WriteByte
;;;565    		break;
00002c  e048              B        |L9.192|
;;;566    		
;;;567    		case 1://黑白
;;;568    			SCCB_WriteByte(0xa6, 0x26);
00002e  2126              MOVS     r1,#0x26
000030  20a6              MOVS     r0,#0xa6
000032  f7fffffe          BL       SCCB_WriteByte
;;;569    			SCCB_WriteByte(0x60, 0x80);
000036  2180              MOVS     r1,#0x80
000038  2060              MOVS     r0,#0x60
00003a  f7fffffe          BL       SCCB_WriteByte
;;;570    			SCCB_WriteByte(0x61, 0x80);
00003e  2180              MOVS     r1,#0x80
000040  2061              MOVS     r0,#0x61
000042  f7fffffe          BL       SCCB_WriteByte
;;;571    		break;	
000046  e03b              B        |L9.192|
;;;572    		
;;;573    		case 2://偏蓝
;;;574    			SCCB_WriteByte(0xa6, 0x1e);
000048  211e              MOVS     r1,#0x1e
00004a  20a6              MOVS     r0,#0xa6
00004c  f7fffffe          BL       SCCB_WriteByte
;;;575    			SCCB_WriteByte(0x60, 0xa0);
000050  21a0              MOVS     r1,#0xa0
000052  2060              MOVS     r0,#0x60
000054  f7fffffe          BL       SCCB_WriteByte
;;;576    			SCCB_WriteByte(0x61, 0x40);	
000058  2140              MOVS     r1,#0x40
00005a  2061              MOVS     r0,#0x61
00005c  f7fffffe          BL       SCCB_WriteByte
;;;577    		break;	
000060  e02e              B        |L9.192|
;;;578    		
;;;579    		case 3://复古
;;;580    			SCCB_WriteByte(0xa6, 0x1e);
000062  211e              MOVS     r1,#0x1e
000064  20a6              MOVS     r0,#0xa6
000066  f7fffffe          BL       SCCB_WriteByte
;;;581    			SCCB_WriteByte(0x60, 0x40);
00006a  2140              MOVS     r1,#0x40
00006c  2060              MOVS     r0,#0x60
00006e  f7fffffe          BL       SCCB_WriteByte
;;;582    			SCCB_WriteByte(0x61, 0xa0);	
000072  21a0              MOVS     r1,#0xa0
000074  2061              MOVS     r0,#0x61
000076  f7fffffe          BL       SCCB_WriteByte
;;;583    		break;	
00007a  e021              B        |L9.192|
;;;584    		
;;;585    		case 4://偏红
;;;586    			SCCB_WriteByte(0xa6, 0x1e);
00007c  211e              MOVS     r1,#0x1e
00007e  20a6              MOVS     r0,#0xa6
000080  f7fffffe          BL       SCCB_WriteByte
;;;587    			SCCB_WriteByte(0x60, 0x80);
000084  2180              MOVS     r1,#0x80
000086  2060              MOVS     r0,#0x60
000088  f7fffffe          BL       SCCB_WriteByte
;;;588    			SCCB_WriteByte(0x61, 0xc0);		
00008c  21c0              MOVS     r1,#0xc0
00008e  2061              MOVS     r0,#0x61
000090  f7fffffe          BL       SCCB_WriteByte
;;;589    		break;	
000094  e014              B        |L9.192|
;;;590    		
;;;591    		case 5://偏绿
;;;592    			SCCB_WriteByte(0xa6, 0x1e);
000096  211e              MOVS     r1,#0x1e
000098  20a6              MOVS     r0,#0xa6
00009a  f7fffffe          BL       SCCB_WriteByte
;;;593    			SCCB_WriteByte(0x60, 0x60);
00009e  2160              MOVS     r1,#0x60
0000a0  4608              MOV      r0,r1
0000a2  f7fffffe          BL       SCCB_WriteByte
;;;594    			SCCB_WriteByte(0x61, 0x60);		
0000a6  2160              MOVS     r1,#0x60
0000a8  2061              MOVS     r0,#0x61
0000aa  f7fffffe          BL       SCCB_WriteByte
;;;595    		break;	
0000ae  e007              B        |L9.192|
;;;596    		
;;;597    		case 6://反相
;;;598    			SCCB_WriteByte(0xa6, 0x46);
0000b0  2146              MOVS     r1,#0x46
0000b2  20a6              MOVS     r0,#0xa6
0000b4  f7fffffe          BL       SCCB_WriteByte
;;;599    		break;	
0000b8  e002              B        |L9.192|
                  |L9.186|
;;;600    				
;;;601    		default:
;;;602    			OV7725_DEBUG("Special Effect error!");
0000ba  bf00              NOP      
0000bc  bf00              NOP      
;;;603    			break;
0000be  bf00              NOP      
                  |L9.192|
0000c0  bf00              NOP                            ;565
;;;604    	}
;;;605    }		
0000c2  bd10              POP      {r4,pc}
;;;606    
                          ENDP


                          AREA ||i.OV7725_Window_Set||, CODE, READONLY, ALIGN=1

                  OV7725_Window_Set PROC
;;;624      */
;;;625    void OV7725_Window_Set(uint16_t sx,uint16_t sy,uint16_t width,uint16_t height,uint8_t QVGA_VGA)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;626    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;627    	uint8_t reg_raw,cal_temp;
;;;628    
;;;629    	/***********QVGA or VGA *************/
;;;630    	if(QVGA_VGA == 0)
000010  f1b80f00          CMP      r8,#0
000014  d104              BNE      |L10.32|
;;;631    	{
;;;632    		/*QVGA RGB565 */
;;;633    		SCCB_WriteByte(REG_COM7,0x46); 
000016  2146              MOVS     r1,#0x46
000018  2012              MOVS     r0,#0x12
00001a  f7fffffe          BL       SCCB_WriteByte
00001e  e003              B        |L10.40|
                  |L10.32|
;;;634    	}
;;;635    	else
;;;636    	{
;;;637    			/*VGA RGB565 */
;;;638    		SCCB_WriteByte(REG_COM7,0x06); 
000020  2106              MOVS     r1,#6
000022  2012              MOVS     r0,#0x12
000024  f7fffffe          BL       SCCB_WriteByte
                  |L10.40|
;;;639    	}
;;;640    
;;;641    	/***************HSTART*********************/
;;;642    	//读取寄存器的原内容，HStart包含偏移值，在原始偏移植的基础上加上窗口偏移	
;;;643    	SCCB_ReadByte(&reg_raw,1,REG_HSTART);
000028  2217              MOVS     r2,#0x17
00002a  2101              MOVS     r1,#1
00002c  4668              MOV      r0,sp
00002e  f7fffffe          BL       SCCB_ReadByte
;;;644    	
;;;645    	//sx为窗口偏移，高8位存储在HSTART，低2位在HREF
;;;646    	cal_temp = (reg_raw + (sx>>2));	
000032  f89d0000          LDRB     r0,[sp,#0]
000036  eb0000a6          ADD      r0,r0,r6,ASR #2
00003a  f00009ff          AND      r9,r0,#0xff
;;;647    	SCCB_WriteByte(REG_HSTART,cal_temp ); 
00003e  4649              MOV      r1,r9
000040  2017              MOVS     r0,#0x17
000042  f7fffffe          BL       SCCB_WriteByte
;;;648    	
;;;649    	/***************HSIZE*********************/
;;;650    	//水平宽度，高8位存储在HSIZE，低2位存储在HREF
;;;651    	SCCB_WriteByte(REG_HSIZE,width>>2);//HSIZE左移两位 
000046  f3c40187          UBFX     r1,r4,#2,#8
00004a  2018              MOVS     r0,#0x18
00004c  f7fffffe          BL       SCCB_WriteByte
;;;652    	
;;;653    	
;;;654    	/***************VSTART*********************/
;;;655    	//读取寄存器的原内容，VStart包含偏移值，在原始偏移植的基础上加上窗口偏移	
;;;656    	SCCB_ReadByte(&reg_raw,1,REG_VSTRT);	
000050  2219              MOVS     r2,#0x19
000052  2101              MOVS     r1,#1
000054  4668              MOV      r0,sp
000056  f7fffffe          BL       SCCB_ReadByte
;;;657    	//sy为窗口偏移，高8位存储在HSTART，低1位在HREF
;;;658    	cal_temp = (reg_raw + (sy>>1));	
00005a  f89d0000          LDRB     r0,[sp,#0]
00005e  eb000067          ADD      r0,r0,r7,ASR #1
000062  f00009ff          AND      r9,r0,#0xff
;;;659    	
;;;660    	SCCB_WriteByte(REG_VSTRT,cal_temp);
000066  4649              MOV      r1,r9
000068  2019              MOVS     r0,#0x19
00006a  f7fffffe          BL       SCCB_WriteByte
;;;661    	
;;;662    	/***************VSIZE*********************/
;;;663    	//垂直高度，高8位存储在VSIZE，低1位存储在HREF
;;;664    	SCCB_WriteByte(REG_VSIZE,height>>1);//VSIZE左移一位
00006e  f3c50147          UBFX     r1,r5,#1,#8
000072  201a              MOVS     r0,#0x1a
000074  f7fffffe          BL       SCCB_WriteByte
;;;665    	
;;;666    	/***************VSTART*********************/
;;;667    	//读取寄存器的原内容	
;;;668    	SCCB_ReadByte(&reg_raw,1,REG_HREF);	
000078  2232              MOVS     r2,#0x32
00007a  2101              MOVS     r1,#1
00007c  4668              MOV      r0,sp
00007e  f7fffffe          BL       SCCB_ReadByte
;;;669    	//把水平宽度的低2位、垂直高度的低1位，水平偏移的低2位，垂直偏移的低1位的配置添加到HREF
;;;670    	cal_temp = (reg_raw |(width&0x03)|((height&0x01)<<2)|((sx&0x03)<<4)|((sy&0x01)<<6));	
000082  f0040003          AND      r0,r4,#3
000086  f89d1000          LDRB     r1,[sp,#0]
00008a  4308              ORRS     r0,r0,r1
00008c  f0050101          AND      r1,r5,#1
000090  ea400081          ORR      r0,r0,r1,LSL #2
000094  f0060103          AND      r1,r6,#3
000098  ea401001          ORR      r0,r0,r1,LSL #4
00009c  f0070101          AND      r1,r7,#1
0000a0  ea401981          ORR      r9,r0,r1,LSL #6
;;;671    	
;;;672    	SCCB_WriteByte(REG_HREF,cal_temp);
0000a4  4649              MOV      r1,r9
0000a6  2032              MOVS     r0,#0x32
0000a8  f7fffffe          BL       SCCB_WriteByte
;;;673    	
;;;674    	/***************HOUTSIZIE /VOUTSIZE*********************/
;;;675    	SCCB_WriteByte(REG_HOutSize,width>>2);
0000ac  f3c40187          UBFX     r1,r4,#2,#8
0000b0  2029              MOVS     r0,#0x29
0000b2  f7fffffe          BL       SCCB_WriteByte
;;;676    	SCCB_WriteByte(REG_VOutSize,height>>1);
0000b6  f3c50147          UBFX     r1,r5,#1,#8
0000ba  202c              MOVS     r0,#0x2c
0000bc  f7fffffe          BL       SCCB_WriteByte
;;;677    	
;;;678    	//读取寄存器的原内容	
;;;679    	SCCB_ReadByte(&reg_raw,1,REG_EXHCH);	
0000c0  222a              MOVS     r2,#0x2a
0000c2  2101              MOVS     r1,#1
0000c4  4668              MOV      r0,sp
0000c6  f7fffffe          BL       SCCB_ReadByte
;;;680    	cal_temp = (reg_raw |(width&0x03)|((height&0x01)<<2));	
0000ca  f0040003          AND      r0,r4,#3
0000ce  f89d1000          LDRB     r1,[sp,#0]
0000d2  4308              ORRS     r0,r0,r1
0000d4  f0050101          AND      r1,r5,#1
0000d8  ea400981          ORR      r9,r0,r1,LSL #2
;;;681    
;;;682    	SCCB_WriteByte(REG_EXHCH,cal_temp);	
0000dc  4649              MOV      r1,r9
0000de  202a              MOVS     r0,#0x2a
0000e0  f7fffffe          BL       SCCB_WriteByte
;;;683    }
0000e4  e8bd83f8          POP      {r3-r9,pc}
;;;684    
                          ENDP


                          AREA ||i.OV7725_Window_VGA_Set||, CODE, READONLY, ALIGN=1

                  OV7725_Window_VGA_Set PROC
;;;698      */
;;;699    void OV7725_Window_VGA_Set(uint16_t sx,uint16_t sy,uint16_t width,uint16_t height)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;700    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;701    	
;;;702    	uint8_t reg_raw,cal_temp;
;;;703    
;;;704    	/***********QVGA or VGA *************/
;;;705    	/*VGA RGB565 */
;;;706    	SCCB_WriteByte(REG_COM7,0x06); 
00000c  2106              MOVS     r1,#6
00000e  2012              MOVS     r0,#0x12
000010  f7fffffe          BL       SCCB_WriteByte
;;;707    
;;;708    	/***************HSTART*********************/
;;;709    	//读取寄存器的原内容，HStart包含偏移值，在原始偏移植的基础上加上窗口偏移	
;;;710    	SCCB_ReadByte(&reg_raw,1,REG_HSTART);
000014  2217              MOVS     r2,#0x17
000016  2101              MOVS     r1,#1
000018  4668              MOV      r0,sp
00001a  f7fffffe          BL       SCCB_ReadByte
;;;711    	
;;;712    	//sx为窗口偏移，高8位存储在HSTART，低2位在HREF
;;;713    	cal_temp = (reg_raw + (sx>>2));	
00001e  f89d0000          LDRB     r0,[sp,#0]
000022  eb0000a6          ADD      r0,r0,r6,ASR #2
000026  f00008ff          AND      r8,r0,#0xff
;;;714    	SCCB_WriteByte(REG_HSTART,cal_temp ); 
00002a  4641              MOV      r1,r8
00002c  2017              MOVS     r0,#0x17
00002e  f7fffffe          BL       SCCB_WriteByte
;;;715    	
;;;716    	/***************HSIZE*********************/
;;;717    	//水平宽度，高8位存储在HSIZE，低2位存储在HREF
;;;718    	SCCB_WriteByte(REG_HSIZE,width>>2);//HSIZE左移两位 320 
000032  f3c40187          UBFX     r1,r4,#2,#8
000036  2018              MOVS     r0,#0x18
000038  f7fffffe          BL       SCCB_WriteByte
;;;719    	
;;;720    	
;;;721    	/***************VSTART*********************/
;;;722    	//读取寄存器的原内容，VStart包含偏移值，在原始偏移植的基础上加上窗口偏移	
;;;723    	SCCB_ReadByte(&reg_raw,1,REG_VSTRT);	
00003c  2219              MOVS     r2,#0x19
00003e  2101              MOVS     r1,#1
000040  4668              MOV      r0,sp
000042  f7fffffe          BL       SCCB_ReadByte
;;;724    	//sy为窗口偏移，高8位存储在HSTART，低1位在HREF
;;;725    	cal_temp = (reg_raw + (sy>>1));	
000046  f89d0000          LDRB     r0,[sp,#0]
00004a  eb000067          ADD      r0,r0,r7,ASR #1
00004e  f00008ff          AND      r8,r0,#0xff
;;;726    	
;;;727    	SCCB_WriteByte(REG_VSTRT,cal_temp);
000052  4641              MOV      r1,r8
000054  2019              MOVS     r0,#0x19
000056  f7fffffe          BL       SCCB_WriteByte
;;;728    	
;;;729    	/***************VSIZE*********************/
;;;730    	//垂直高度，高8位存储在VSIZE，低1位存储在HREF
;;;731    	SCCB_WriteByte(REG_VSIZE,height>>1);//VSIZE左移一位 240
00005a  f3c50147          UBFX     r1,r5,#1,#8
00005e  201a              MOVS     r0,#0x1a
000060  f7fffffe          BL       SCCB_WriteByte
;;;732    	
;;;733    	/***************VSTART*********************/
;;;734    	//读取寄存器的原内容	
;;;735    	SCCB_ReadByte(&reg_raw,1,REG_HREF);	
000064  2232              MOVS     r2,#0x32
000066  2101              MOVS     r1,#1
000068  4668              MOV      r0,sp
00006a  f7fffffe          BL       SCCB_ReadByte
;;;736    	//把水平宽度的低2位、垂直高度的低1位，水平偏移的低2位，垂直偏移的低1位的配置添加到HREF
;;;737    	cal_temp = (reg_raw |(width&0x03)|((height&0x01)<<2)|((sx&0x03)<<4)|((sy&0x01)<<6));	
00006e  f0040003          AND      r0,r4,#3
000072  f89d1000          LDRB     r1,[sp,#0]
000076  4308              ORRS     r0,r0,r1
000078  f0050101          AND      r1,r5,#1
00007c  ea400081          ORR      r0,r0,r1,LSL #2
000080  f0060103          AND      r1,r6,#3
000084  ea401001          ORR      r0,r0,r1,LSL #4
000088  f0070101          AND      r1,r7,#1
00008c  ea401881          ORR      r8,r0,r1,LSL #6
;;;738    	
;;;739    	SCCB_WriteByte(REG_VSTRT,cal_temp);
000090  4641              MOV      r1,r8
000092  2019              MOVS     r0,#0x19
000094  f7fffffe          BL       SCCB_WriteByte
;;;740    	
;;;741    	/***************HOUTSIZIE /VOUTSIZE*********************/
;;;742    	SCCB_WriteByte(REG_HOutSize,width>>2);
000098  f3c40187          UBFX     r1,r4,#2,#8
00009c  2029              MOVS     r0,#0x29
00009e  f7fffffe          BL       SCCB_WriteByte
;;;743    	SCCB_WriteByte(REG_VOutSize,height>>1);
0000a2  f3c50147          UBFX     r1,r5,#1,#8
0000a6  202c              MOVS     r0,#0x2c
0000a8  f7fffffe          BL       SCCB_WriteByte
;;;744    	
;;;745    	//读取寄存器的原内容	
;;;746    	SCCB_ReadByte(&reg_raw,1,REG_EXHCH);	
0000ac  222a              MOVS     r2,#0x2a
0000ae  2101              MOVS     r1,#1
0000b0  4668              MOV      r0,sp
0000b2  f7fffffe          BL       SCCB_ReadByte
;;;747    	
;;;748    	cal_temp = (reg_raw |(width&0x03)|((height&0x01)<<2));	
0000b6  f0040003          AND      r0,r4,#3
0000ba  f89d1000          LDRB     r1,[sp,#0]
0000be  4308              ORRS     r0,r0,r1
0000c0  f0050101          AND      r1,r5,#1
0000c4  ea400881          ORR      r8,r0,r1,LSL #2
;;;749    
;;;750    	SCCB_WriteByte(REG_EXHCH,cal_temp);	
0000c8  4641              MOV      r1,r8
0000ca  202a              MOVS     r0,#0x2a
0000cc  f7fffffe          BL       SCCB_WriteByte
;;;751    }
0000d0  e8bd83f8          POP      {r3-r9,pc}
;;;752    
                          ENDP


                          AREA ||i.VSYNC_GPIO_Config||, CODE, READONLY, ALIGN=2

                  VSYNC_GPIO_Config PROC
;;;274     ************************************************/
;;;275    static void VSYNC_GPIO_Config(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;276    {
;;;277    		GPIO_InitTypeDef GPIO_InitStructure;
;;;278    	  EXTI_InitTypeDef EXTI_InitStructure;
;;;279    		NVIC_InitTypeDef NVIC_InitStructure;
;;;280    	
;;;281    		/*初始化时钟，注意中断要开AFIO*/
;;;282    	  RCC_APB2PeriphClockCmd ( RCC_APB2Periph_AFIO|OV7725_VSYNC_GPIO_CLK, ENABLE );	 
000002  2101              MOVS     r1,#1
000004  2041              MOVS     r0,#0x41
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;283        
;;;284    		/*初始化引脚*/
;;;285    		GPIO_InitStructure.GPIO_Pin =  OV7725_VSYNC_GPIO_PIN;
00000a  2008              MOVS     r0,#8
00000c  f8ad000c          STRH     r0,[sp,#0xc]
;;;286        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000010  2004              MOVS     r0,#4
000012  f88d000f          STRB     r0,[sp,#0xf]
;;;287        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000016  2003              MOVS     r0,#3
000018  f88d000e          STRB     r0,[sp,#0xe]
;;;288    	  GPIO_Init(OV7725_VSYNC_GPIO_PORT, &GPIO_InitStructure);
00001c  a903              ADD      r1,sp,#0xc
00001e  4816              LDR      r0,|L12.120|
000020  f7fffffe          BL       GPIO_Init
;;;289    
;;;290    		/*配置中断*/
;;;291        GPIO_EXTILineConfig(OV7725_VSYNC_EXTI_SOURCE_PORT, OV7725_VSYNC_EXTI_SOURCE_PIN);
000024  2103              MOVS     r1,#3
000026  2002              MOVS     r0,#2
000028  f7fffffe          BL       GPIO_EXTILineConfig
;;;292        EXTI_InitStructure.EXTI_Line = OV7725_VSYNC_EXTI_LINE;
00002c  2008              MOVS     r0,#8
00002e  9001              STR      r0,[sp,#4]
;;;293        EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
000030  2000              MOVS     r0,#0
000032  f88d0008          STRB     r0,[sp,#8]
;;;294    		EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling ; 
000036  200c              MOVS     r0,#0xc
000038  f88d0009          STRB     r0,[sp,#9]
;;;295        EXTI_InitStructure.EXTI_LineCmd = ENABLE;
00003c  2001              MOVS     r0,#1
00003e  f88d000a          STRB     r0,[sp,#0xa]
;;;296        EXTI_Init(&EXTI_InitStructure);
000042  a801              ADD      r0,sp,#4
000044  f7fffffe          BL       EXTI_Init
;;;297        EXTI_GenerateSWInterrupt(OV7725_VSYNC_EXTI_LINE);		
000048  2008              MOVS     r0,#8
00004a  f7fffffe          BL       EXTI_GenerateSWInterrupt
;;;298    	
;;;299    		/*配置优先级*/
;;;300        NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
00004e  f44f60c0          MOV      r0,#0x600
000052  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;301        NVIC_InitStructure.NVIC_IRQChannel = OV7725_VSYNC_EXTI_IRQ;
000056  2009              MOVS     r0,#9
000058  f88d0000          STRB     r0,[sp,#0]
;;;302        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
00005c  2000              MOVS     r0,#0
00005e  f88d0001          STRB     r0,[sp,#1]
;;;303        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
000062  2003              MOVS     r0,#3
000064  f88d0002          STRB     r0,[sp,#2]
;;;304        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000068  2001              MOVS     r0,#1
00006a  f88d0003          STRB     r0,[sp,#3]
;;;305        NVIC_Init(&NVIC_InitStructure);
00006e  4668              MOV      r0,sp
000070  f7fffffe          BL       NVIC_Init
;;;306    }
000074  bd1f              POP      {r0-r4,pc}
;;;307    
                          ENDP

000076  0000              DCW      0x0000
                  |L12.120|
                          DCD      0x40011000

                          AREA ||i.color_check||, CODE, READONLY, ALIGN=1

                  color_check PROC
;;;756    **/
;;;757    uint8_t color_check(uint16_t tmp[], uint16_t es) {
000000  e92d43f0          PUSH     {r4-r9,lr}
000004  4602              MOV      r2,r0
000006  4688              MOV      r8,r1
;;;758    	int r = tmp[0], g = tmp[1], b = tmp[2];
000008  8817              LDRH     r7,[r2,#0]
00000a  8854              LDRH     r4,[r2,#2]
00000c  8895              LDRH     r5,[r2,#4]
;;;759    	uint16_t maxrgb = tmp[0], minrgb = tmp[0];
00000e  8811              LDRH     r1,[r2,#0]
000010  f8b2c000          LDRH     r12,[r2,#0]
;;;760    	maxrgb = maxrgb > tmp[1] ? maxrgb : tmp[1];
000014  8850              LDRH     r0,[r2,#2]
000016  4288              CMP      r0,r1
000018  da01              BGE      |L13.30|
00001a  4608              MOV      r0,r1
00001c  e000              B        |L13.32|
                  |L13.30|
00001e  8850              LDRH     r0,[r2,#2]
                  |L13.32|
000020  4601              MOV      r1,r0
;;;761    	maxrgb = maxrgb > tmp[2] ? maxrgb : tmp[2];
000022  8890              LDRH     r0,[r2,#4]
000024  4288              CMP      r0,r1
000026  da01              BGE      |L13.44|
000028  4608              MOV      r0,r1
00002a  e000              B        |L13.46|
                  |L13.44|
00002c  8890              LDRH     r0,[r2,#4]
                  |L13.46|
00002e  4601              MOV      r1,r0
;;;762    	minrgb = minrgb < tmp[1] ? minrgb : tmp[1];
000030  8850              LDRH     r0,[r2,#2]
000032  4560              CMP      r0,r12
000034  dd01              BLE      |L13.58|
000036  4660              MOV      r0,r12
000038  e000              B        |L13.60|
                  |L13.58|
00003a  8850              LDRH     r0,[r2,#2]
                  |L13.60|
00003c  4684              MOV      r12,r0
;;;763    	minrgb = minrgb < tmp[2] ? minrgb : tmp[2];
00003e  8890              LDRH     r0,[r2,#4]
000040  4560              CMP      r0,r12
000042  dd01              BLE      |L13.72|
000044  4660              MOV      r0,r12
000046  e000              B        |L13.74|
                  |L13.72|
000048  8890              LDRH     r0,[r2,#4]
                  |L13.74|
00004a  4684              MOV      r12,r0
;;;764    	long h;
;;;765    	int bot = maxrgb - minrgb;
00004c  eba1060c          SUB      r6,r1,r12
;;;766    	if(bot == 0) h = 0;
000050  b906              CBNZ     r6,|L13.84|
000052  2300              MOVS     r3,#0
                  |L13.84|
;;;767    	if(maxrgb == r && g >= b) h = (g - b) * 100 * 60 / bot;
000054  42b9              CMP      r1,r7
000056  d10b              BNE      |L13.112|
000058  42ac              CMP      r4,r5
00005a  db09              BLT      |L13.112|
00005c  1b60              SUBS     r0,r4,r5
00005e  f04f0964          MOV      r9,#0x64
000062  fb00f009          MUL      r0,r0,r9
000066  ebc01000          RSB      r0,r0,r0,LSL #4
00006a  0080              LSLS     r0,r0,#2
00006c  fb90f3f6          SDIV     r3,r0,r6
                  |L13.112|
;;;768    	if(maxrgb == r && g < b) h = 36000 - (b - g) * 100 * 60 / bot;
000070  42b9              CMP      r1,r7
000072  d10f              BNE      |L13.148|
000074  42ac              CMP      r4,r5
000076  da0d              BGE      |L13.148|
000078  1b28              SUBS     r0,r5,r4
00007a  f04f0964          MOV      r9,#0x64
00007e  fb00f009          MUL      r0,r0,r9
000082  ebc01000          RSB      r0,r0,r0,LSL #4
000086  0080              LSLS     r0,r0,#2
000088  fb90f0f6          SDIV     r0,r0,r6
00008c  f64849a0          MOV      r9,#0x8ca0
000090  eba90300          SUB      r3,r9,r0
                  |L13.148|
;;;769    	if(maxrgb == g) h = (b - r) * 100 * 60 / bot + 12000;
000094  42a1              CMP      r1,r4
000096  d10d              BNE      |L13.180|
000098  1be8              SUBS     r0,r5,r7
00009a  f04f0964          MOV      r9,#0x64
00009e  fb00f009          MUL      r0,r0,r9
0000a2  ebc01000          RSB      r0,r0,r0,LSL #4
0000a6  0080              LSLS     r0,r0,#2
0000a8  fb90f0f6          SDIV     r0,r0,r6
0000ac  f64269e0          MOV      r9,#0x2ee0
0000b0  eb000309          ADD      r3,r0,r9
                  |L13.180|
;;;770    	if(maxrgb == b) h = (r - g) * 100 * 60 / bot + 24000;
0000b4  42a9              CMP      r1,r5
0000b6  d10d              BNE      |L13.212|
0000b8  1b38              SUBS     r0,r7,r4
0000ba  f04f0964          MOV      r9,#0x64
0000be  fb00f009          MUL      r0,r0,r9
0000c2  ebc01000          RSB      r0,r0,r0,LSL #4
0000c6  0080              LSLS     r0,r0,#2
0000c8  fb90f0f6          SDIV     r0,r0,r6
0000cc  f64559c0          MOV      r9,#0x5dc0
0000d0  eb000309          ADD      r3,r0,r9
                  |L13.212|
;;;771    	if(h < 3600 || h > 5100) return 0;
0000d4  f5b36f61          CMP      r3,#0xe10
0000d8  db03              BLT      |L13.226|
0000da  f24130ec          MOV      r0,#0x13ec
0000de  4283              CMP      r3,r0
0000e0  dd02              BLE      |L13.232|
                  |L13.226|
0000e2  2000              MOVS     r0,#0
                  |L13.228|
;;;772    	return 1;
;;;773    }
0000e4  e8bd83f0          POP      {r4-r9,pc}
                  |L13.232|
0000e8  2001              MOVS     r0,#1                 ;772
0000ea  e7fb              B        |L13.228|
;;;774    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=1

                  cam_mode
000000  0000              DCB      0x00,0x00
000002  0000              DCW      0x0000
000004  00000140          DCW      0x0000,0x0140
000008  00f00000          DCW      0x00f0,0x0000
00000c  0000              DCW      0x0000
00000e  0300              DCB      0x03,0x00
000010  00000000          DCB      0x00,0x00,0x00,0x00
                  Sensor_Config
000014  11001246          DCB      0x11,0x00,0x12,0x46
000018  173f1850          DCB      0x17,0x3f,0x18,0x50
00001c  19031a78          DCB      0x19,0x03,0x1a,0x78
000020  32002950          DCB      0x32,0x00,0x29,0x50
000024  2c782a00          DCB      0x2c,0x78,0x2a,0x00
000028  427f4d09          DCB      0x42,0x7f,0x4d,0x09
00002c  63e064ff          DCB      0x63,0xe0,0x64,0xff
000030  65206600          DCB      0x65,0x20,0x66,0x00
000034  670013f0          DCB      0x67,0x00,0x13,0xf0
000038  0d810fc5          DCB      0x0d,0x81,0x0f,0xc5
00003c  142122ff          DCB      0x14,0x21,0x22,0xff
000040  23012434          DCB      0x23,0x01,0x24,0x34
000044  253c26a1          DCB      0x25,0x3c,0x26,0xa1
000048  2b006baa          DCB      0x2b,0x00,0x6b,0xaa
00004c  13ff695d          DCB      0x13,0xff,0x69,0x5d
000050  900a9101          DCB      0x90,0x0a,0x91,0x01
000054  92019301          DCB      0x92,0x01,0x93,0x01
000058  945f9553          DCB      0x94,0x5f,0x95,0x53
00005c  9611971a          DCB      0x96,0x11,0x97,0x1a
000060  983d995a          DCB      0x98,0x3d,0x99,0x5a
000064  9a1e9b00          DCB      0x9a,0x1e,0x9b,0x00
000068  9c25a765          DCB      0x9c,0x25,0xa7,0x65
00006c  a8659e81          DCB      0xa8,0x65,0x9e,0x81
000070  a6067e0c          DCB      0xa6,0x06,0x7e,0x0c
000074  7f16802a          DCB      0x7f,0x16,0x80,0x2a
000078  814e8261          DCB      0x81,0x4e,0x82,0x61
00007c  836f847b          DCB      0x83,0x6f,0x84,0x7b
000080  8586868e          DCB      0x85,0x86,0x86,0x8e
000084  879788a4          DCB      0x87,0x97,0x88,0xa4
000088  89af8ac5          DCB      0x89,0xaf,0x8a,0xc5
00008c  8bd78ce8          DCB      0x8b,0xd7,0x8c,0xe8
000090  8d20a980          DCB      0x8d,0x20,0xa9,0x80
000094  aa80acff          DCB      0xaa,0x80,0xac,0xff
000098  33002299          DCB      0x33,0x00,0x22,0x99
00009c  23034a00          DCB      0x23,0x03,0x4a,0x00
0000a0  49134708          DCB      0x49,0x13,0x47,0x08
0000a4  4b144c17          DCB      0x4b,0x14,0x4c,0x17
0000a8  46050cd0          DCB      0x46,0x05,0x0c,0xd0
0000ac  0ef5              DCB      0x0e,0xf5
                  OV7725_REG_NUM
0000ae  4d                DCB      0x4d
                  Ov7725_vsync
0000af  00                DCB      0x00
